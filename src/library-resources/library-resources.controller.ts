// src/library-resources/library-resources.controller.ts
import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  UseGuards,
  ParseIntPipe,
  UploadedFile,
  UseInterceptors,
  Delete,
} from '@nestjs/common'; // <-- Import UseGuards
import { FileInterceptor } from '@nestjs/platform-express';
import { AuthGuard } from '@nestjs/passport'; // <-- Import AuthGuard
import { LibraryResourcesService } from './library-resources.service';
import { CreateLibraryResourceDto } from './dto/create-library-resource.dto';
import { UpdateLibraryResourceDto } from './dto/update-library-resource.dto';

@UseGuards(AuthGuard('jwt')) // <-- PROTECT ALL ROUTES IN THIS CONTROLLER
@Controller('library-resources')
export class LibraryResourcesController {
  constructor(
    private readonly libraryResourcesService: LibraryResourcesService,
  ) {}

  // The rest of the controller is already generated by the CLI.
  // You might want to add ParseIntPipe for better validation.
  @Post()
  @UseInterceptors(FileInterceptor('file'))
  create(
    @Body() createLibraryResourceDto: CreateLibraryResourceDto,
    @UploadedFile() file: Express.Multer.File,
  ) {
    return this.libraryResourcesService.create(createLibraryResourceDto, file);
  }

  @Get()
  findAll() {
    return this.libraryResourcesService.findAll();
  }

  @Get(':id')
  findOne(@Param('id', ParseIntPipe) id: number) {
    return this.libraryResourcesService.findOne(id);
  }

  @Patch(':id')
  update(
    @Param('id', ParseIntPipe) id: number,
    @Body() updateLibraryResourceDto: UpdateLibraryResourceDto,
  ) {
    return this.libraryResourcesService.update(id, updateLibraryResourceDto);
  }

  @Delete(':id')
  remove(@Param('id', ParseIntPipe) id: number) {
    return this.libraryResourcesService.remove(id);
  }
}
